<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.2</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>us.msrs.aurora24</groupId>
	<artifactId>prototype-webservice</artifactId>
	<version>0.1.0-SNAPSHOT</version>
	<name>demo-aurora-service</name>
	<description>Demo GraphQL, Spring Boot Web Service running in Open Liberty</description>

	<properties>
		<java.version>17</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!--		 The graphql plugin's version, used in this tutorial 
		<graphql-maven-plugin.version>2.4</graphql-maven-plugin.version>-->
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-graphql</artifactId>
		</dependency>
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-extended-scalars</artifactId>
			<version>21.0</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.paho</groupId>
			<artifactId>org.eclipse.paho.client.mqttv3</artifactId>
			<version>1.2.5</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!--			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.graphql-java-generator</groupId>
				<artifactId>graphql-maven-plugin</artifactId>
				<version>${graphql-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>generateClientCode</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					 Let's configure the GraphQL Gradle Plugin: 
					 All available parameters are described here:
			https://graphql-maven-plugin-project.graphql-java-generator.com/graphql-maven-plugin/generateClientCode-mojo.html 
					<packageName>org.forum.client</packageName>
					<customScalars>
						<customScalar>
							<graphQLTypeName>Date</graphQLTypeName>
							<javaType>java.util.Date</javaType>
							<graphQLScalarTypeStaticField>
			com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date</graphQLScalarTypeStaticField>
						</customScalar>
					</customScalars>
				</configuration>
			</plugin>-->

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Enable Liberty Maven plugin -->
			<!-- tag::libertyMavenPlugin[] -->
			<plugin>
				<groupId>io.openliberty.tools</groupId>
				<artifactId>liberty-maven-plugin</artifactId>
				<version>3.10</version>
				<configuration>
					<!-- tag::appsDirectory[] -->
					<appsDirectory>apps</appsDirectory>
					<!-- end::appsDirectory[] -->
					<!-- tag::installAppPackages[] -->
					<installAppPackages>spring-boot-project</installAppPackages>
					<!-- end::installAppPackages[] -->
					<!-- tag::include[] -->
					<include>minify,runnable</include>
					<!-- end::include[] -->
					<!-- tag::packageFile[] -->
					<packageName>GSSpringBootApp</packageName>
					<!-- end::packageFile[] -->
				</configuration>
				<!-- tag::packageGoals[] -->
				<executions>
					<execution>
						<id>package-server</id>
						<phase>package</phase>
						<goals>
							<goal>create</goal>
							<goal>install-feature</goal>
							<goal>deploy</goal>
							<goal>package</goal>
						</goals>
					</execution>
				</executions>
				<!-- end::packageGoals[] -->
			</plugin>
			<!-- end::libertyMavenPlugin[] -->
			<!-- End of Liberty Maven plugin -->

		</plugins>
	</build>

</project>
